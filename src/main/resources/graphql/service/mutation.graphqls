type Mutation {

    """
    Send the message from the user in the AI ChatBot
    The message gets preprocessed to be categorized after which a different answer service/logic will be used.
    """
    sendMessage(userInput: String!, courseId: UUID): LectureQuestionResponse!

    """
    Generates a Hint for a question asked in a quiz based on material in the corresponding course.
    """
    generateHint(questionInput: HintGenerationInput!, courseId: UUID!): HintResponse!

}

type LectureQuestionResponse {
    answer: String!
    sources: [Source!]!
}

interface Source {
    mediaRecordId: UUID!
}

type DocumentSource implements Source {
    mediaRecordId: UUID!
    page: Int!
}

type VideoSource implements Source {
    mediaRecordId: UUID!
    startTime: Float!
}

type HintResponse {
    hint: String!
}

enum HintQuestionType { # All available types to generate a hint for
    MULTIPLE_CHOICE
    ASSOCIATION
    CLOZE
}

input HintGenerationInput {
    type: HintQuestionType!
    multipleChoice: HintMultipleChoiceInput
    association: HintAssociationInput
    cloze: HintClozeInput
}

input HintMultipleChoiceInput {
    text: String!
    answers: [String!]!
}

input HintClozeInput {
    text: String! #The cloze text with blanks displayed as [1], [2], ...
    blanks: [String!]!
}

input HintAssociationInput {
    text: String!
    pairs: [AssociationPairInput!]!
}

input AssociationPairInput {
    left: String!
    right: String!
}
